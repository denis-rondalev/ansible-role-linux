---
packages_unnecessary_list:
  ["xinetd", "inetd", "ypserv", "telnet-server", "rsh-server", "prelink"]

swap_swappiness_value: 60
swap_file_path: "/swapfile"

# ssh

ssh_port: 22
ssh_config_path: "/etc/ssh/sshd_config"
ssh_allow_agent_forwarding: false
ssh_allow_tcp_forwarding: false
ssh_x11_forwarding: false
ssh_compression: false
ssh_syslog_facility: "AUTH"
ssh_log_level: "VERBOSE"
ssh_client_alive_interval: 300
ssh_client_alive_count: 3
ssh_use_dns: false

auditd_max_log_file: 6
auditd_max_log_file_action: rotate

system_locale: "en_US.UTF-8"
system_selinux_state: "disabled"
system_selinux_policy: "targeted"

# ----------------------------------------
# ------------- HARDENING ----------------
# ----------------------------------------

os_security_auto_logout: 0

# login.defs settings

# Define the number of SHA rounds.
# With a lot of rounds brute forcing the password is more difficult.
# But note also that it more CPU resources will be needed to authenticate users.
# Possible values: 1000-999999999
os_sha_crypt_min_rounds: "640000"
os_sha_crypt_max_rounds: "640000"
os_env_extra_user_paths: []

# Password aging controls
os_auth_pw_max_age: 99999
os_auth_pw_min_age: 0
os_auth_retries: 5
os_auth_timeout: 60
os_auth_allow_homeless: false

# Disable unused filesystems
os_unused_filesystems:
  - "cramfs"
  - "freevxfs"
  - "jffs2"
  - "hfs"
  - "hfsplus"
  - "squashfs"
  - "udf"
  - "vfat"
  # Obsolete network protocols that should be disabled
  - "dccp"
  - "rds"
  - "sctp"
  - "tipc"

# Whitelist for used filesystems
os_filesystem_whitelist: []

snoopy_rpm_key_url: "https://a2o.github.io/snoopy-packages/snoopy-packages-key.pub"
snoopy_rpm_repo_url: "https://a2o.github.io/snoopy-packages/repo/centos/8/stable/"

sysctl_config:
  # These settings eliminate an entire class of security vulnerabilities:
  # time-of-check-time-of-use cross-privilege attacks using guessable
  # filenames (generally seen as "/tmp file race" vulnerabilities).
  fs.protected_hardlinks: 1
  fs.protected_symlinks: 1

  # For more info on the following settings see: https://www.kernel.org/doc/html/latest/admin-guide/sysctl/fs.html
  # Restrict FIFO special device creation behavior
  fs.protected_fifos: 2
  # Restrict regular files creation behavior
  fs.protected_regular: 2

  # Prevent core dumps with SUID. These are usually only
  # needed by developers and may contain sensitive information
  fs.suid_dumpable: 0

  # Controls whether core dumps will append the PID to the core filename
  # Useful for debugging multi-threaded applications
  kernel.core_uses_pid: 1

  # When an attacker is trying to exploit the local kernel, it is often
  # helpful to be able to examine where in memory the kernel, modules,
  # and data structures live. As such, kernel addresses should be treated
  # as sensitive information.
  #
  # Many files and interfaces contain these addresses (e.g. /proc/kallsyms,
  # /proc/modules, etc), and this setting can censor the addresses. A value
  # of "0" allows all users to see the kernel addresses. A value of "1"
  # limits visibility to the root user, and "2" blocks even the root user.
  #
  # Some off-the-shelf malware exploit kernel addresses exposed
  # via /proc/kallsyms so by not making these addresses easily available
  # we increase the cost of such attack some what; now such malware has
  # to check which kernel Tails is running and then fetch the corresponding
  # kernel address map from some external source. This is not hard,
  # but certainly not all malware has such functionality.
  kernel.kptr_restrict: 2

  # kexec is dangerous: it enables replacement of the running kernel.
  kernel.kexec_load_disabled: 1

  # Magic Sysrq should be disabled, but can also be set to a safe value if so
  # desired for physical machines. It can allow a safe reboot if the system hangs
  # and is a 'cleaner' alternative to hitting the reset button.
  # The following values are permitted:
  # * **0**   - disable sysrq
  # * **1**   - enable sysrq completely
  # * **>1**  - bitmask of enabled sysrq functions:
  # * **2**   - control of console logging level
  # * **4**   - control of keyboard (SAK, unraw)
  # * **8**   - debugging dumps of processes etc.
  # * **16**  - sync command
  # * **32**  - remount read-only
  # * **64**  - signalling of processes (term, kill, oom-kill)
  # * **128** - reboot/poweroff
  # * **256** - nicing of all RT tasks
  # kernel.sysrq: 0

  # Virtual memory regions protection
  kernel.randomize_va_space: 2

  # The PTRACE system is used for debugging.  With it, a single user process
  # can attach to any other dumpable process owned by the same user.  In the
  # case of malicious software, it is possible to use PTRACE to access
  # credentials that exist in memory (re-using existing SSH connections,
  # extracting GPG agent information, etc).
  #
  # A PTRACE scope of "0" is the more permissive mode.  A scope of "1" limits
  # PTRACE only to direct child processes (e.g. "gdb name-of-program" and
  # "strace -f name-of-program" work, but gdb's "attach" and "strace -fp $PID"
  # do not).  The PTRACE scope is ignored when a user has CAP_SYS_PTRACE, so
  # "sudo strace -fp $PID" will work as before.  For more details see:
  # https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace
  #
  # For applications launching crash handlers that need PTRACE, exceptions can
  # be registered by the debugee by declaring in the segfault handler
  # specifically which process will be using PTRACE on the debugee:
  #   prctl(PR_SET_PTRACER, debugger_pid, 0, 0, 0);
  #
  # In general, PTRACE is not needed for the average running Ubuntu system.
  # To that end, the default is to set the PTRACE scope to "1".  This value
  # may not be appropriate for developers or servers with only admin accounts.
  kernel.yama.ptrace_scope: 1

  # This restricts loading TTY line disciplines to the CAP_SYS_MODULE capability
  dev.tty.ldisc_autoload: 0

  # This enables hardening for the BPF JIT compiler for all users
  # Enabling hardening trades off performance, but can mitigate JIT spraying
  net.core.bpf_jit_harden: 2

  # Controls use of the performance events system by unprivileged users
  kernel.perf_event_paranoid: 3

  # Restrict unprivileged access to kernel syslog
  kernel.dmesg_restrict: 1

  # The setting of 1 would mean that unprivileged users cannot use eBPF
  kernel.unprivileged_bpf_disabled: 1

  # Enable RFC-recommended source validation feature.
  # If the return packet does not go out the same interface that the corresponding
  # source packet came from, the packet is dropped (and logged if log_martians is set).
  net.ipv4.conf.all.rp_filter: 1
  net.ipv4.conf.default.rp_filter: 1

  # Reduce the surface on SMURF attacks.
  # Make sure to ignore ECHO broadcasts, which are only required in broad network analysis.
  net.ipv4.icmp_echo_ignore_broadcasts: 1

  # Some routers (and some attackers) will send responses that violate RFC-1122 and attempt
  # to fill up a log file system with many useless error messages.
  net.ipv4.icmp_ignore_bogus_error_responses: 1

  # Limit the amount of traffic the system uses for ICMP.
  net.ipv4.icmp_ratelimit: 100

  # Adjust the ICMP ratelimit to include ping, dst unreachable,
  # source quench, ime exceed, param problem, timestamp reply, information reply.
  net.ipv4.icmp_ratemask: 88089

  # Disable TCP timestamps in order to not reveal system uptime.
  net.ipv4.tcp_timestamps: 0

  # Define restriction level for announcing the local source IP.
  # net.ipv4.conf.all.arp_ignore: 1

  # Define mode for sending replies in response to
  # received ARP requests that resolve local target IP addresses.
  # net.ipv4.conf.all.arp_announce: 2

  # RFC 1337 fix F1
  # net.ipv4.tcp_rfc1337: 1

  # Attackers use SYN flood attacks to perform a denial of service attack on a system
  # by sending many SYN packets without completing the three way handshake.
  # This will quickly use up slots in the kernel's half-open connection queue and
  # prevent legitimate connections from succeeding.
  # SYN cookies allow the system to keep accepting valid connections, even if
  # under a denial of service attack.
  net.ipv4.tcp_syncookies: 1

  # Send(router) or accept(host) RFC1620 shared media redirects
  net.ipv4.conf.all.shared_media: 1
  net.ipv4.conf.default.shared_media: 1

  # Accepting source route can lead to malicious networking behavior,
  # so disable it if not needed.
  net.ipv4.conf.all.accept_source_route: 0
  net.ipv4.conf.default.accept_source_route: 0
  net.ipv6.conf.all.accept_source_route: 0
  net.ipv6.conf.default.accept_source_route: 0

  # For non-routers: don't send redirects.
  # An attacker could use a compromised host to send invalid ICMP redirects to other
  # router devices in an attempt to corrupt routing and have users access a system
  # set up by the attacker as opposed to a valid system
  net.ipv4.conf.all.send_redirects: 0
  net.ipv4.conf.default.send_redirects: 0

  # Log martian packets
  # This feature logs packets with un-routable source addresses to the kernel log.
  # Enabling this feature and logging these packets allows an administrator to investigate
  # the possibility that an attacker is sending spoofed packets to their system
  net.ipv4.conf.all.log_martians: 1
  net.ipv4.conf.default.log_martians: 1

  # Accepting redirects can lead to malicious networking behavior, so disable
  # it if not needed.
  # Attackers could use bogus ICMP redirect messages to maliciously alter the system
  # routing tables and get them to send packets to incorrect networks and allow
  # your system packets to be captured.
  # Setting net.ipv4.conf.all.secure_redirects to 0 protects the system from
  # routing table updates by possibly compromised known gateways
  net.ipv4.conf.default.accept_redirects: 0
  net.ipv4.conf.all.accept_redirects: 0
  net.ipv4.conf.all.secure_redirects: 0
  net.ipv4.conf.default.secure_redirects: 0
  net.ipv6.conf.default.accept_redirects: 0
  net.ipv6.conf.all.accept_redirects: 0

  # Ignore RAs on IPv6
  net.ipv6.conf.all.accept_ra: 0
  net.ipv6.conf.default.accept_ra: 0

  # Disable acceptance of IPv6 router solicitations messages
  net.ipv6.conf.default.router_solicitations: 0
  net.ipv6.conf.all.router_solicitations: 0

  # Disable Accept Router Preference from router advertisement
  net.ipv6.conf.default.accept_ra_rtr_pref: 0

  # Disable learning Prefix Information from router advertisement
  net.ipv6.conf.default.accept_ra_pinfo: 0

  # Disable learning Hop limit from router advertisement
  net.ipv6.conf.default.accept_ra_defrtr: 0

  # Disable IPv6 autoconfiguration
  net.ipv6.conf.default.autoconf: 0
  net.ipv6.conf.all.autoconf: 0

  # Disable neighbor solicitations to send out per address
  net.ipv6.conf.default.dad_transmits: 0

  # Assign one global unicast IPv6 addresses to each interface
  net.ipv6.conf.default.max_addresses: 1

  # Protect the zero page of memory from userspace mmap to prevent kernel
  # NULL-dereference attacks against potential future kernel security
  # vulnerabilities.  (Added in kernel 2.6.23.)
  #
  # While this default is built into the Ubuntu kernel, there is no way to
  # restore the kernel default if the value is changed during runtime; for
  # example via package removal (e.g. wine, dosemu).  Therefore, this value
  # is reset to the secure default each time the sysctl values are loaded.
  vm.mmap_min_addr: 65536

  # These settings are set to the maximum supported value in order to
  # improve ASLR effectiveness for mmap, at the cost of increased
  # address-space fragmentation
  vm.mmap_rnd_bits: 32
  vm.mmap_rnd_compat_bits: 16
