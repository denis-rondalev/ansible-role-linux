---
- name: Disable firewalld
  systemd:
    name: firewalld
    state: stopped
    masked: true
    enabled: false
  ignore_errors: true
  when: ansible_os_family == "RedHat"

- name: Remove ufw package
  package:
    state: absent
    name: "ufw"
  register: _progress_status
  until: _progress_status is succeeded
  delay: 5
  retries: 5
  when: ansible_os_family == "Debian"

- name: Enable iptables persistent service
  systemd:
    name: "{{ iptables_persistent_service }}"
    state: started
    enabled: true

- name: Reset rules
  block:
    - name: Set the policy for the all chains in table filter to ACCEPT
      iptables:
        ip_version: "{{ item.ip_version }}"
        chain: "{{ item.chain }}"
        policy: ACCEPT
        table: filter
      loop:
        - { chain: "INPUT", ip_version: "ipv4" }
        - { chain: "OUTPUT", ip_version: "ipv4" }
        - { chain: "FORWARD", ip_version: "ipv4" }
        - { chain: "INPUT", ip_version: "ipv6" }
        - { chain: "OUTPUT", ip_version: "ipv6" }
        - { chain: "FORWARD", ip_version: "ipv6" }

    - name: Set the policy for the all chains in table nat to ACCEPT
      iptables:
        ip_version: "{{ item.ip_version }}"
        chain: "{{ item.chain }}"
        policy: ACCEPT
        table: nat
      loop:
        - { chain: "PREROUTING", ip_version: "ipv4" }
        - { chain: "POSTROUTING", ip_version: "ipv4" }
        - { chain: "PREROUTING", ip_version: "ipv6" }
        - { chain: "POSTROUTING", ip_version: "ipv6" }

    - name: Flush default rules in table filter
      iptables:
        ip_version: "{{ item.ip_version }}"
        chain: "{{ item.chain }}"
        flush: true
        table: filter
      loop:
        - { chain: "INPUT", ip_version: "ipv4" }
        - { chain: "OUTPUT", ip_version: "ipv4" }
        - { chain: "FORWARD", ip_version: "ipv4" }
        - { chain: "INPUT", ip_version: "ipv6" }
        - { chain: "OUTPUT", ip_version: "ipv6" }
        - { chain: "FORWARD", ip_version: "ipv6" }

    - name: Flush default rules in table filter
      iptables:
        ip_version: "{{ item.ip_version }}"
        chain: "{{ item.chain }}"
        flush: true
        table: nat
      loop:
        - { chain: "PREROUTING", ip_version: "ipv4" }
        - { chain: "POSTROUTING", ip_version: "ipv4" }
        - { chain: "PREROUTING", ip_version: "ipv6" }
        - { chain: "POSTROUTING", ip_version: "ipv6" }
  when: firewall_reset_rules | bool
  notify: save_iptables_rules

- name: Allow loopback interface for INPUT
  iptables:
    ip_version: "{{ item }}"
    chain: INPUT
    in_interface: lo
    state: present
    jump: ACCEPT
    comment: "loopback interface"
  loop: ["ipv4", "ipv6"]
  notify: save_iptables_rules

- name: Allow loopback interface for OUTPUT
  iptables:
    ip_version: "{{ item }}"
    chain: OUTPUT
    out_interface: lo
    state: present
    jump: ACCEPT
    comment: "loopback interface"
  loop: ["ipv4", "ipv6"]
  notify: save_iptables_rules

# quickly process packets for which we already have a connection
- name: Allow connections with ESTABLISHED and RELATED state
  iptables:
    ip_version: "{{ item.ip_version }}"
    chain: "{{ item.chain }}"
    state: present
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    comment: "established and related state"
  loop:
    - { chain: "INPUT", ip_version: "ipv4" }
    - { chain: "OUTPUT", ip_version: "ipv4" }
    - { chain: "INPUT", ip_version: "ipv6" }
    - { chain: "OUTPUT", ip_version: "ipv6" }
  notify: save_iptables_rules

- name: Drop connections with INVALID state
  iptables:
    ip_version: "{{ item }}"
    chain: INPUT
    state: present
    ctstate: INVALID
    jump: DROP
    comment: "invalid state"
  loop: ["ipv4", "ipv6"]
  notify: save_iptables_rules

- name: Allow dhcp client
  iptables:
    ip_version: "{{ item.ip_version }}"
    chain: INPUT
    state: present
    source_port: "{{ item.source_port }}"
    destination_port: "{{ item.destination_port }}"
    protocol: udp
    jump: ACCEPT
    comment: "dhcp client"
  loop:
    - { source_port: 67, destination_port: 68, ip_version: "ipv4" }
    - { source_port: 547, destination_port: 546, ip_version: "ipv6" }
  when: firewall_dhcp_client_allow | bool
  notify: save_iptables_rules

- name: Allow all internal connections (ipv4)
  iptables:
    ip_version: "ipv4"
    chain: INPUT
    state: present
    source: "{{ firewall_ipv4_internal_ip_pool }}"
    destination: "{{ firewall_ipv4_internal_ip_pool }}"
    protocol: "all"
    jump: ACCEPT
    comment: "all internal connections"
  when: firewall_ipv4_allow_internal | bool
  notify: save_iptables_rules

- name: Allow all internal connections (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    state: present
    source: "{{ firewall_ipv6_internal_ip_pool }}"
    destination: "{{ firewall_ipv6_internal_ip_pool }}"
    protocol: "all"
    jump: ACCEPT
    comment: "all internal connections"
  when: firewall_ipv6_allow_internal | bool
  notify: save_iptables_rules

- name: Allow icmp from external (ipv4)
  iptables:
    ip_version: "ipv4"
    chain: INPUT
    state: present
    protocol: icmp
    icmp_type: "{{ item }}"
    jump: ACCEPT
    comment: "icmp type {{ item }}"
  loop: [3, 8, 11, 12, 13]
  notify: save_iptables_rules

- name: Allow icmp from external (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    state: present
    protocol: icmpv6
    jump: ACCEPT
    comment: "icmpv6"
  notify: save_iptables_rules

- name: Allow ssh from all
  iptables:
    ip_version: "{{ item }}"
    chain: INPUT
    protocol: tcp
    destination_port: "{{ ssh_port }}"
    state: present
    ctstate: NEW,ESTABLISHED
    jump: ACCEPT
    comment: "ssh from external"
  loop: ["ipv4", "ipv6"]
  notify: save_iptables_rules

- name: Allow NAT (ipv4)
  iptables:
    ip_version: "ipv4"
    chain: POSTROUTING
    table: nat
    out_interface: "{{ ansible_default_ipv4.interface }}"
    state: present
    jump: MASQUERADE
    comment: "default nat"
  when: firewall_ipv4_nat | bool
  notify: save_iptables_rules

- name: Allow NAT (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: POSTROUTING
    table: nat
    out_interface: "{{ ansible_default_ipv6.interface }}"
    state: present
    jump: MASQUERADE
    comment: "default nat"
  when: firewall_ipv6_nat | bool
  notify: save_iptables_rules

- name: Set the policy for the INPUT chain to DROP
  iptables:
    ip_version: "{{ item }}"
    chain: INPUT
    policy: DROP
  loop: ["ipv4", "ipv6"]
  when: firewall_input_policy_drop | bool

- name: Set the policy for the FORWARD chain to DROP
  iptables:
    ip_version: "{{ item }}"
    chain: FORWARD
    policy: DROP
  loop: ["ipv4", "ipv6"]
  when: firewall_forward_policy_drop | bool
