---
- name: Reset rules (ipv6)
  block:
    - name: Set the policy for the all chains in table filter to ACCEPT (ipv6)
      iptables:
        ip_version: "ipv6"
        chain: "{{ item }}"
        policy: ACCEPT
        table: filter
      with_items: ["INPUT", "OUTPUT", "FORWARD"]

    - name: Set the policy for the all chains in table nat to ACCEPT (ipv6)
      iptables:
        ip_version: "ipv6"
        chain: "{{ item }}"
        policy: ACCEPT
        table: nat
      with_items: ["PREROUTING", "POSTROUTING"]

    - name: Flush default rules in table filter (ipv6)
      iptables:
        ip_version: "ipv6"
        chain: "{{ item }}"
        flush: true
        table: filter
      with_items: ["INPUT", "OUTPUT", "FORWARD"]

    - name: Flush default rules in table filter (ipv6)
      iptables:
        ip_version: "ipv6"
        chain: "{{ item }}"
        flush: true
        table: nat
      with_items: ["PREROUTING", "POSTROUTING"]
  when: firewall_reset_rules | bool
  notify: save_iptables_rules

- name: Allow loopback interface for INPUT (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    in_interface: lo
    state: present
    jump: ACCEPT
    comment: "loopback interface"
  notify: save_iptables_rules

- name: Allow loopback interface for OUTPUT (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: OUTPUT
    out_interface: lo
    state: present
    jump: ACCEPT
    comment: "loopback interface"
  notify: save_iptables_rules

# quickly process packets for which we already have a connection
- name: Allow connections with ESTABLISHED and RELATED state (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: "{{ item }}"
    state: present
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    comment: "established and related state"
  with_items: ["INPUT", "OUTPUT"]
  notify: save_iptables_rules

- name: Drop connections with INVALID state (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    state: present
    ctstate: INVALID
    jump: DROP
    comment: "invalid state"
  notify: save_iptables_rules

- name: Allow dhcp client (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    state: present
    source_port: 547
    destination_port: 546
    protocol: udp
    jump: ACCEPT
    comment: "dhcp client"
  when: firewall_dhcp_client_allow | bool
  notify: save_iptables_rules

- name: Allow all internal connections (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    state: present
    source: "{{ firewall_ipv6_internal_ip_pool }}"
    destination: "{{ firewall_ipv6_internal_ip_pool }}"
    protocol: "all"
    jump: ACCEPT
    comment: "all internal connections"
  notify: save_iptables_rules
  when: firewall_ipv6_allow_internal | bool

- name: Allow icmp from external (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    state: present
    protocol: icmpv6
    jump: ACCEPT
    comment: "icmpv6"
  notify: save_iptables_rules

- name: Allow ssh from all (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    protocol: tcp
    destination_port: "{{ ssh_port }}"
    state: present
    ctstate: NEW,ESTABLISHED
    jump: ACCEPT
    comment: "ssh from external"
  notify: save_iptables_rules

- name: Allow NAT (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: POSTROUTING
    table: nat
    out_interface: "{{ ansible_default_ipv6.interface }}"
    state: present
    jump: MASQUERADE
    comment: "default nat"
  when: firewall_ipv6_nat | bool
  notify: save_iptables_rules

- name: Set the policy for the INPUT chain to DROP (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: INPUT
    policy: DROP
  when: firewall_input_policy_drop | bool

- name: Set the policy for the FORWARD chain to DROP (ipv6)
  iptables:
    ip_version: "ipv6"
    chain: FORWARD
    policy: DROP
  when: firewall_forward_policy_drop | bool
